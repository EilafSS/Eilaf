#include <iostream>
#include <chrono>

using namespace std;
using namespace std::chrono;

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1); 

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;    
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1); 
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    cout << "Enter number of elements: ";
    int n;
    cin >> n;

    int arr[n];
    cout << "Enter " << n << " elements: " << endl;
    for (int i = 0; i < n; i++) 
        cin >> arr[i];

    auto start = high_resolution_clock::now(); 
    quickSort(arr, 0, n - 1); 
    auto stop = high_resolution_clock::now(); 
    auto duration = duration_cast<milliseconds>(stop - start); 

    cout << "Time taken: " << duration.count() << "ms" << endl;

    // Best case
    int arr1[n];
    for (int i = 0; i < n; i++) arr1[i] = i;
    start = high_resolution_clock::now(); 
    quickSort(arr1, 0, n - 1);
    stop = high_resolution_clock::now(); 
    duration = duration_cast<milliseconds>(stop - start); 
    cout << "Best case time taken: " << duration.count() << "ms" << endl;

    // Worst case
    int arr2[n];
    for (int i = n-1; i >= 0; i--) arr2[i] = i; 
    start = high_resolution_clock::now(); 
    quickSort(arr2, 0, n - 1);
    stop = high_resolution_clock::now(); 
    duration = duration_cast<milliseconds>(stop - start); 
    cout << "Worst case time taken: " << duration.count() << "ms" << endl;

    return 0;
}
