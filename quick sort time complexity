#include <iostream>
#include <vector>
#include <chrono>
#include <random>

using namespace std;
using namespace std::chrono;

// Partition function for quicksort
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// QuicksortFunction
void quicksort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

int main() {
    // Small input size
    int n = 5;
    vector<int> arr1 = {4, 2, 7, 1, 3};
    auto start1 = high_resolution_clock::now();
    quicksort(arr1, 0, n -1);
    auto stop1 = high_resolution_clock::now();
    auto duration1 = duration_cast<milliseconds>(stop1 - start1);

    // Medium input size
    n = 500;
    vector<int> arr2;
    for (int i = 0; i < n; i++) {
        arr2.push_back(rand() % 10000);
    }
    auto start2 = high_resolution_clock::now();
    quicksort(arr2, 0, n -1);
    auto stop2 = high_resolution_clock::now();
    auto duration2 = duration_cast<milliseconds>(stop2 - start2);

    // Large input size
    n = 10000;
    vector<int> arr3;
    for (int i = 0; i < n; i++) {
        arr3.push_back(rand() % 10000);

    auto start3 = high_resolution_clock::now();
    quicksort(arr3, 0, n -1);
    auto stop3 = high_resolution_clock::now();
    auto duration3 = duration_cast<milliseconds>(stop3 - start3);

    // Print results
    cout << "Input Size\t| Best Case\t| Worst Case\t| Average Case\n";
    cout << "----------------------------------------------------------\n";
    cout << "Small (" << arr1.size() << ")\t| " << duration1.count() << " ms \t| " << duration1.count() << " ms   \t| " << duration1.count() << " ms\n";
    cout << "Medium (" << arr2.size() << ")\t| " << duration2.count() <<" ms\t| " << duration3.count() << " ms\t| " << duration2.count() << " ms\n";
    cout << "Large (" << arr3.size() << ")\t| " << duration2.count() << " ms\t| " << duration3.count() << " ms\t| " << duration2.count() << " ms\n";

    return 0;
} }
